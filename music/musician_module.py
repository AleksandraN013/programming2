"""Domain classes and functions related to the concept of musician
"""


#%%
# Setup / Data

from util import utility
from music.enums import Vocals, Instrument
import json

# from testdata.musicians import *


#%%
class Musician:
    """The class describing the concept of musician.
    It is assumed that a musician is sufficiently described by their
    name and whether they are a solo musician or a member of a band.

    This class illustrates some important concepts of Python classes:
    - self
    - __init__()
    - __str__()
    - __eq__(self, other) is the equivalent of Java equals() and should be overridden in classes
    - __dict__ attribute of all objects
    - data fields (instance variables)
    - methods - calling them by self.<method>(...) from the same class where they are defined
    """

    def __init__(self, name, is_band_member=True):
        self.name = name
        self.is_band_member = is_band_member

        # self.__n = 'lll'                              # 'private' field
        # self._m = 'mmm'
        # self.__immutable_property = 'I am immutable'

    def __str__(self):
        n = self.name
        bm = '(band member)' if self.is_band_member else '(solo musician)'
        return f'{n} {bm}'

    def __eq__(self, other):
        i = isinstance(other, Musician)
        n = self.name == other.name
        bm = self.is_band_member == other.is_band_member
        return i and n and bm

    # Properties: 'private' fields/attributes:
    #   @property
    #   def <attr>(self):
    #       """ The docstring for <attr> must go here."""
    #       return self.__<attr>
    #   @<attr>.setter
    #   def <attr>(self, <attr>):
    #       self.__<attr> = <attr> if ... else ...
    #   @<attr>.deleter
    #   def <attr>(self, <attr>):
    #       del self.__<attr>

    # Properties allow programmers to create methods that behave like attributes.
    # With properties, one can change how they compute the target attribute whenever they need to do so.
    # A more detailed explanation: https://realpython.com/python-property/.
    # In general, avoid turning attributes that donâ€™t require extra processing into properties.
    # Using properties in those situations can make the code unnecessarily verbose, confusing and slower
    # than code based on regular attributes.

    # Make name a property (after setting up __init__(), __str__(), __eq__(), methods,...)

    # Run setters and getters in the debugger

    @property
    def name(self):
        return self.__name

    @name.setter # it's called name.setter, not bc it's for name in our case
    def name(self, name):
        self.__name = name if isinstance(name, str) else 'unknown'

    # Add an immutable property (no setter for it)
    # @property
    # def immutable_property(self):
    #     return self.__immutable_property

    def play(self, song_title, *args, **kwargs):
        """Assumes that song_title, *args (expressions of gratitude) and kwargs.values() (messages) are strings.
        Prints song_title, rhythm counts, expressions of gratitude and messages. A call example:
            <musician>.play(song_title, *['Thank you!', 'You're wonderful!], love='We love you!')
        Convention: if rhythm count is provided, it is passed as rhythm_count='...' and is the first kwarg.
        """
        n = self.name
        s = song_title
        m = ', '.join([str(a) for a in args])
        g = ', '.join([str(v) for v in kwargs.values()])
        return f'{n} playing {s}: ... playing ... {m} {g}'

    def play_song(self, song_title, *args, **kwargs):
        """Demonstrates calling another method from the same class (self.<method>(...) as a mandatory syntax).
        """

        return self.play(song_title, *args, **kwargs)

    # Alternative constructor
    @classmethod
    def from_str(cls, musician_string):
        """Inverted __str__() method.
        Assumes that musician_string is in the format generated by __str__().
        """
        n = musician_string.split(' (')[0]
        bms = musician_string.split(' (')[1].rstrip(')')
        bm = True if bms == 'band member' else False
        return cls(n, bm)



#%%
class MusicianEncoder(json.JSONEncoder):
    """JSON encoder for Musician objects (cls= parameter in json.dumps()).
    """

    def default(self, musician):
        # recommendation: always use double quotes with JSON

        pass
        # can simply return musician_py_to_json(musician), to avoid code duplication


#%%
def musician_py_to_json(musician):
    """JSON encoder for Musician objects (default= parameter in json.dumps()).
    """

    # recommendation: always use double quotes with JSON


#%%
def musician_json_to_py(musician_json):
    """JSON decoder for Musician objects (object_hook= parameter in json.loads()).
    """


#%%
class Singer(Musician):
    """The class describing the concept of singer.
    It is assumed that a singer is sufficiently described as a Musician,
    with the addition of whether they are a lead or a background singer.

    Useful link (related to inheritance in Python):
    https://stackoverflow.com/questions/3394835/use-of-args-and-kwargs/3394902#3394902 (calling super() in constructors)
    """

    # # Version 1 - no multiple inheritance
    # def __init__(self, name, vocals, is_band_member = True):
    #     super().__init__(name, is_band_member)
    #     self.vocals = vocals if isinstance(vocals, Vocals) else None
    #
    # Version 2 - with multiple inheritance
    def __init__(self, vocals, **kwargs):
        super().__init__(**kwargs)
        self.vocals = vocals

    def __str__(self):
        return super().__str__() + f'\n{self.vocals.value}'

    def __eq__(self, other):
        pass
        # Recommended if inheritance is involved
        # (https://stackoverflow.com/questions/390250/elegant-ways-to-support-equivalence-equality-in-python-classes):
        # if type(other) is type(self):
        #     return self.__dict__ == other.__dict__
        # return False
        return self.__dict__ == other.__dict__ if isinstance(other, Singer) else False

    def play(self, song_title, *args, **kwargs):
        """Overrides the play() method from superclass.
        In addition to printing song_title, expressions of gratitude and messages,
        it also prints an additional message in the end.
        A call example:
            <singer>.play(song_title, *['Thank you!', 'You're wonderful!], love='We love you!')
        """

    def what_do_you_do(self):
        """Just a simple method to describe the concept of singer.
        """
        return f'I am {self.name}, and I sing songs.'



#%%
class Songwriter(Musician):
    """The class describing the concept of songwriter.
    It is assumed that a songwriter is sufficiently described as a musician
    who writes songs and plays an instrument.
    """

    # # Version 1 - no multiple inheritance
    # def __init__(self, name, instrument, is_band_member=True):
    #     super().__init__(name, is_band_member)
    #     self.instrument = instrument if isinstance(instrument, Instrument) else None

    # def __init__(self, name, instrument, is_band_member = True):
    #     super().__init__(name, is_band_member)
    #     self.instrument = instrument if isinstance(instrument, Instrument) else None

    # Version 2 - with multiple inheritance
    def __init__(self, instrument=Instrument.RHYTHM_GUITAR, **kwargs):
        super().__init__(**kwargs)
        self.instrument = instrument

    def __str__(self):
        return super().__str__() + f'\n{self.instrument.value}'

    def __eq__(self, other):
        # pass
        # Recommended if inheritance is involved
        # (https://stackoverflow.com/questions/390250/elegant-ways-to-support-equivalence-equality-in-python-classes):
        # if type(other) is type(self):
        #     return self.__dict__ == other.__dict__
        # return False
        return self.__dict__ == other.__dict__ if isinstance(other, Songwriter) else False

    def what_do_you_do(self):
        """Just a simple method to describe the concept of songwriter.
        """
        return f'I am {self.name}, and I write songs.'


#%%
class SingerSongwriter(Singer, Songwriter):
    """The class describing the concept of singer-songwriter.
    It is assumed that a singer-songwriter is sufficiently described as a Singer who is simultaneously a Songwriter.

    Useful links :
    https://stackoverflow.com/a/50465583/1899061 (designing classes (i.e. their __init__() methods) for multiple inh.)
    https://stackoverflow.com/a/533675/1899061 (mixins explained, and what good they are in multiple inheritance)
    """

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    def __str__(self):
        return super().__str__()

    def __eq__(self, other):
        # pass
        # Recommended if inheritance is involved
        # (https://stackoverflow.com/questions/390250/elegant-ways-to-support-equivalence-equality-in-python-classes):
        # if type(other) is type(self):
        #     return self.__dict__ == other.__dict__
        # return False
        return self.__dict__ == other.__dict__ if isinstance(other, SingerSongwriter) else False

    def tell(self):
        """What if multiple inheritance requires calling a method with same method name
        from different paths (i.e., from different base classes)?
        E.g., class C(A, B) and both A and B implement a method with the same name m() in their own ways).
        In that case, call A's version like A.m(self), and B's version like B.m(self).
        """
        print(Singer.what_do_you_do(self))
        print(Songwriter.what_do_you_do(self))

